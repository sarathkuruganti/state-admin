import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from './../../../firebase';
import { useNavigate } from 'react-router-dom';
import { AiOutlineCalendar, AiOutlineDollar, AiOutlineUser, AiOutlineHome, AiOutlineTool, AiOutlineSearch } from 'react-icons/ai';

export function Invoice() {
  const [invoices, setInvoices] = useState([]);
  const [filteredInvoices, setFilteredInvoices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchInvoices = async () => {
      try {
        const invoicesQuery = query(
          collection(db, 'invoice'),
          where('generatedby', '==', 'factory')
        );
        const querySnapshot = await getDocs(invoicesQuery);
        const invoicesData = querySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));

        // Sort invoices by dateIssued (latest first)
        invoicesData.sort((a, b) => new Date(b.dateIssued) - new Date(a.dateIssued));

        setInvoices(invoicesData);
        setFilteredInvoices(invoicesData); // Initialize filtered invoices
      } catch (error) {
        console.error('Error fetching invoices: ', error);
      } finally {
        setLoading(false);
      }
    };

    fetchInvoices();
  }, []);

  useEffect(() => {
    // Filter invoices based on the search term
    const results = invoices.filter(invoice => {
      const invoiceNumber = invoice.invoiceNumber ? invoice.invoiceNumber.toString().toLowerCase() : '';
      const customerName = invoice.invoiceTo ? invoice.invoiceTo.toString().toLowerCase() : '';
      const customerAddress = invoice.customerAddress ? invoice.customerAddress.toString().toLowerCase() : '';
      const dateIssued = invoice.dateIssued ? new Date(invoice.dateIssued).toLocaleDateString().toLowerCase() : '';
      const search = searchTerm.toLowerCase();
  
      return (
        invoiceNumber.includes(search) ||
        customerName.includes(search) ||
        customerAddress.includes(search) ||
        dateIssued.includes(search)
      );
    });
  
    setFilteredInvoices(results);
  }, [searchTerm, invoices]);
  

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="animate-spin h-8 w-8 border-4 border-t-4 border-blue-500 rounded-full"></div>
      </div>
    );
  }

  const handleViewClick = (invoiceNumber) => {
    navigate(`/screen/invoicedetails/${invoiceNumber}`);
  };

  return (
    <div className="container mx-auto">
    <div className="flex flex-col md:flex-row justify-between items-center mb-4">
  <h2 className="text-2xl font-bold text-center hidden md:block">Invoices</h2>
  <div className="flex items-center w-full md:w-auto relative">
    <input
      type="text"
      placeholder="Search"
      className="border border-gray-300 rounded-lg py-2 px-4 pl-5 w-full md:w-auto focus:ring-blue-500 focus:border-blue-500 placeholder-gray-800"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
    />
  </div>
</div>



      {/* Table for desktop */}
      <div className="hidden md:block overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-black">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Ref-No</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Date</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Total</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Customer</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Customer Address</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Generated By</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredInvoices.map((invoice) => (
              <tr key={invoice.id} className="hover:bg-gray-100">
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{invoice.invoiceNumber}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{new Date(invoice.dateIssued).toLocaleDateString()}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">₹{invoice.total}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{invoice.invoiceTo}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">{invoice.customerAddress}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 capitalize">{invoice.generatedby}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                  <button 
                    className="text-blue-500 hover:text-blue-700"
                    onClick={() => handleViewClick(invoice.invoiceNumber)}
                  >
                    View
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Cards for mobile */}
      <div className="md:hidden grid grid-cols-1 gap-4">
        {filteredInvoices.map((invoice) => (
          <div key={invoice.id} className="bg-white shadow-lg rounded-lg p-4 border border-gray-200">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-lg font-semibold">
                Ref-No: {invoice.invoiceNumber}
              </h3>
              <button 
                className="text-blue-600 hover:text-blue-600"
                onClick={() => handleViewClick(invoice.invoiceNumber)}
              >
                View
              </button>
            </div>
            <p className="text-sm mb-1 flex items-center">
              <AiOutlineCalendar className="mr-2 text-gray-500" /><strong className="pr-3"> Date:</strong> {new Date(invoice.dateIssued).toLocaleDateString()}
            </p>
            <p className="text-sm mb-1 flex items-center">
              <AiOutlineDollar className="mr-2 text-gray-500" /> <strong className="pr-3"> Total:</strong> ₹{invoice.total}
            </p>
            <p className="text-sm mb-1 flex items-center">
              <AiOutlineUser className="mr-2 text-gray-500" /> <strong className="pr-3"> Customer:</strong> {invoice.invoiceTo}
            </p>
            <p className="text-sm mb-1 flex items-center">
              <AiOutlineHome className="mr-2 text-gray-500" /> <strong className="pr-3"> Address:</strong> {invoice.customerAddress}
            </p>
            <p className="text-sm flex items-center">
              <AiOutlineTool className="mr-2 text-gray-500" /> <strong className="pr-3"> Generated By:</strong> {invoice.generatedby}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default Invoice;